{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nexport default function MarkdownEditorComponent(props) {\n  const {\n    input,\n    placeholder,\n    label\n  } = props;\n  let textAreaRef = useRef();\n  const inputClassNames = 'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n\n  const handleAction = action => e => {\n    e.preventDefault();\n    const el = textAreaRef.current;\n\n    if (!el) {\n      return;\n    }\n\n    const tokens = this.actionToTokens[action];\n    this.addTokensToTextarea(el, tokens);\n    this.handleTextChange();\n  };\n\n  return __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleAction('BOLD')\n  }, \"Bold\"), __jsx(\"label\", {\n    className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\",\n    htmlFor: input.name\n  }, label), __jsx(\"div\", {\n    className: \"flex items-stretch\"\n  }, __jsx(\"textarea\", _extends({\n    placeholder: placeholder\n  }, input, {\n    className: inputClassNames\n  }))));\n}","map":{"version":3,"sources":["/Users/michal.lester/Documents/ML/kodifaj/components/shared/markdown-editor/markdown-editor.component.tsx"],"names":["React","useRef","MarkdownEditorComponent","props","input","placeholder","label","textAreaRef","inputClassNames","handleAction","action","e","preventDefault","el","current","tokens","actionToTokens","addTokensToTextarea","handleTextChange","name"],"mappings":";;AAAA,OAAOA,KAAP,IAA6BC,MAA7B,QAA0C,OAA1C;AAGA,eAAe,SAASC,uBAAT,CACbC,KADa,EAEC;AACd,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAgCH,KAAtC;AACA,MAAII,WAAW,GAAGN,MAAM,EAAxB;AACA,QAAMO,eAAe,GACnB,0KADF;;AAGA,QAAMC,YAAY,GAChBC,MADmB,IAE4BC,CAAC,IAAI;AACpDA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,EAAE,GAAGN,WAAW,CAACO,OAAvB;;AACA,QAAI,CAACD,EAAL,EAAS;AACP;AACD;;AAED,UAAME,MAAM,GAAG,KAAKC,cAAL,CAAoBN,MAApB,CAAf;AAEA,SAAKO,mBAAL,CAAyBJ,EAAzB,EAA6BE,MAA7B;AACA,SAAKG,gBAAL;AACD,GAdD;;AAiBA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAET,YAAY,CAAC,MAAD;AAA3C,YADF,EAEE;AACE,IAAA,SAAS,EAAC,oEADZ;AAEE,IAAA,OAAO,EAAEL,KAAK,CAACe;AAFjB,KAIGb,KAJH,CAFF,EAQE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AACE,IAAA,WAAW,EAAED;AADf,KAEMD,KAFN;AAGE,IAAA,SAAS,EAAEI;AAHb,KADF,CARF,CADF;AAkBD","sourcesContent":["import React, {ReactElement, useRef} from 'react';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport default function MarkdownEditorComponent(\n  props: MarkdownEditorProps,\n): ReactElement {\n  const { input, placeholder, label } = props;\n  let textAreaRef = useRef<HTMLTextAreaElement>();\n  const inputClassNames =\n    'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n\n  const handleAction = (\n    action: Actions\n  ): React.MouseEventHandler<HTMLButtonElement> => e => {\n    e.preventDefault();\n\n    const el = textAreaRef.current;\n    if (!el) {\n      return;\n    }\n\n    const tokens = this.actionToTokens[action];\n\n    this.addTokensToTextarea(el, tokens);\n    this.handleTextChange();\n  };\n\n\n  return (\n    <div className=\"mb-3\">\n      <button type=\"button\" onClick={handleAction('BOLD')}>Bold</button>\n      <label\n        className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\"\n        htmlFor={input.name}\n      >\n        {label}\n      </label>\n      <div className=\"flex items-stretch\">\n        <textarea\n          placeholder={placeholder}\n          {...input}\n          className={inputClassNames}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport interface MarkdownEditorProps\n  extends FieldRenderProps<string, HTMLElement> {\n  label?: string;\n  placeholder?: string;\n}\n\nexport type Actions = \"BOLD\" | \"ITALIC\" | \"HEADING\" | \"CODEBLOCK\" | \"UL\" | \"OL\";\ninterface Tokens {\n  open: string;\n  close: string;\n}\n"]},"metadata":{},"sourceType":"module"}