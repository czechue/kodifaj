{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nexport default function MarkdownEditorComponent(props) {\n  var _this = this;\n\n  var input = props.input,\n      placeholder = props.placeholder,\n      label = props.label;\n  var textAreaRef = useRef();\n  var inputClassNames = 'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n  var actionToTokens = {\n    BOLD: {\n      open: \"**\",\n      close: \"**\"\n    },\n    ITALIC: {\n      open: \"_\",\n      close: \"_\"\n    },\n    HEADING: {\n      open: \"# \",\n      close: \"\"\n    },\n    CODEBLOCK: {\n      open: \"```javascript\\n\",\n      close: \"\\n```\"\n    },\n    UL: {\n      open: \"* \",\n      close: \"\"\n    },\n    OL: {\n      open: \"1. \",\n      close: \"\"\n    }\n  };\n\n  var handleAction = function handleAction(action) {\n    return function (e) {\n      e.preventDefault();\n      var el = textAreaRef.current;\n\n      if (!el) {\n        return;\n      }\n\n      var tokens = actionToTokens[action];\n\n      _this.addTokensToTextarea(el, tokens);\n\n      _this.handleTextChange();\n    };\n  };\n\n  return __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleAction('BOLD')\n  }, \"Bold\"), __jsx(\"label\", {\n    className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\",\n    htmlFor: input.name\n  }, label), __jsx(\"div\", {\n    className: \"flex items-stretch\"\n  }, __jsx(\"textarea\", _extends({\n    placeholder: placeholder\n  }, input, {\n    className: inputClassNames\n  }))));\n}","map":{"version":3,"sources":["/Users/michal.lester/Documents/ML/kodifaj/components/shared/markdown-editor/markdown-editor.component.tsx"],"names":["React","useRef","MarkdownEditorComponent","props","input","placeholder","label","textAreaRef","inputClassNames","actionToTokens","BOLD","open","close","ITALIC","HEADING","CODEBLOCK","UL","OL","handleAction","action","e","preventDefault","el","current","tokens","addTokensToTextarea","handleTextChange","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgDC,MAAhD,QAA6D,OAA7D;AAGA,eAAe,SAASC,uBAAT,CACbC,KADa,EAEC;AAAA;;AAAA,MACNC,KADM,GACwBD,KADxB,CACNC,KADM;AAAA,MACCC,WADD,GACwBF,KADxB,CACCE,WADD;AAAA,MACcC,KADd,GACwBH,KADxB,CACcG,KADd;AAEd,MAAMC,WAAW,GAAGN,MAAM,EAA1B;AACA,MAAMO,eAAe,GACnB,0KADF;AAGA,MAAMC,cAA+C,GAAG;AACtDC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAArB,KADgD;AAEtDC,IAAAA,MAAM,EAAE;AAAEF,MAAAA,IAAI,EAAE,GAAR;AAAaC,MAAAA,KAAK,EAAE;AAApB,KAF8C;AAGtDE,IAAAA,OAAO,EAAE;AAAEH,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAArB,KAH6C;AAItDG,IAAAA,SAAS,EAAE;AAAEJ,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,KAAK,EAAE;AAAlC,KAJ2C;AAKtDI,IAAAA,EAAE,EAAE;AAAEL,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAArB,KALkD;AAMtDK,IAAAA,EAAE,EAAE;AAAEN,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAE;AAAtB;AANkD,GAAxD;;AAUA,MAAMM,YAAY,GAAG,SAAfA,YAAe,CACnBC,MADmB;AAAA,WAEsB,UAAAC,CAAC,EAAI;AAC9CA,MAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,EAAE,GAAGf,WAAW,CAACgB,OAAvB;;AACA,UAAI,CAACD,EAAL,EAAS;AACP;AACD;;AAED,UAAME,MAAM,GAAGf,cAAc,CAACU,MAAD,CAA7B;;AAEA,MAAA,KAAI,CAACM,mBAAL,CAAyBH,EAAzB,EAA6BE,MAA7B;;AACA,MAAA,KAAI,CAACE,gBAAL;AACD,KAdoB;AAAA,GAArB;;AAiBA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAER,YAAY,CAAC,MAAD;AAA3C,YADF,EAEE;AACE,IAAA,SAAS,EAAC,oEADZ;AAEE,IAAA,OAAO,EAAEd,KAAK,CAACuB;AAFjB,KAIGrB,KAJH,CAFF,EAQE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AACE,IAAA,WAAW,EAAED;AADf,KAEMD,KAFN;AAGE,IAAA,SAAS,EAAEI;AAHb,KADF,CARF,CADF;AAkBD","sourcesContent":["import React, {MouseEventHandler, ReactElement, useRef} from 'react';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport default function MarkdownEditorComponent(\n  props: MarkdownEditorProps,\n): ReactElement {\n  const { input, placeholder, label } = props;\n  const textAreaRef = useRef<HTMLTextAreaElement>();\n  const inputClassNames =\n    'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n\n  const actionToTokens: { [action in Actions]: Tokens } = {\n    BOLD: { open: \"**\", close: \"**\" },\n    ITALIC: { open: \"_\", close: \"_\" },\n    HEADING: { open: \"# \", close: \"\" },\n    CODEBLOCK: { open: \"```javascript\\n\", close: \"\\n```\" },\n    UL: { open: \"* \", close: \"\" },\n    OL: { open: \"1. \", close: \"\" }\n  };\n\n\n  const handleAction = (\n    action: Actions\n  ): MouseEventHandler<HTMLButtonElement> => e => {\n    e.preventDefault();\n\n    const el = textAreaRef.current;\n    if (!el) {\n      return;\n    }\n\n    const tokens = actionToTokens[action];\n\n    this.addTokensToTextarea(el, tokens);\n    this.handleTextChange();\n  };\n\n\n  return (\n    <div className=\"mb-3\">\n      <button type=\"button\" onClick={handleAction('BOLD')}>Bold</button>\n      <label\n        className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\"\n        htmlFor={input.name}\n      >\n        {label}\n      </label>\n      <div className=\"flex items-stretch\">\n        <textarea\n          placeholder={placeholder}\n          {...input}\n          className={inputClassNames}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport interface MarkdownEditorProps\n  extends FieldRenderProps<string, HTMLElement> {\n  label?: string;\n  placeholder?: string;\n}\n\nexport type Actions = \"BOLD\" | \"ITALIC\" | \"HEADING\" | \"CODEBLOCK\" | \"UL\" | \"OL\";\ninterface Tokens {\n  open: string;\n  close: string;\n}\n"]},"metadata":{},"sourceType":"module"}