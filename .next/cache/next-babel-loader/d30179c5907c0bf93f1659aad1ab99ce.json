{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Form, Field } from 'react-final-form';\nimport { FieldArray } from 'react-final-form-arrays';\nimport arrayMutators from 'final-form-arrays';\nimport FormWrapperComponent from '../shared/form-wrapper/form-wrapper.component';\nimport InputComponent from '../shared/input/input.component';\nimport mapFormToNewTaskFormat from './utils/map-form-to-new-task-form.util';\nimport NewTaskHeading from './heading/heading.component';\nimport FieldArrayComponent from './field-array/field-array.component';\nimport MarkdownEditorComponent from '../shared/markdown-editor/markdown-editor.component';\nimport { MarkdownViewComponent } from '../shared/markdown-view/markdown-view.component';\nimport taskMapper from './utils/task-mapper.util'; // const required = (value: string) => (value ? undefined : \"Required\");\n\nexport default function NewTaskComponent({\n  task,\n  onSubmit\n}) {\n  // todo: investigate why values argument doesnt work with NewTaskForm type\n  async function onFormSubmit(values) {\n    if (onSubmit) {\n      onSubmit(mapFormToNewTaskFormat(values));\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(NewTaskHeading, null, \"Kreator zada\\u0144\"), __jsx(FormWrapperComponent, null, __jsx(Form, {\n    onSubmit: onFormSubmit,\n    mutators: _objectSpread({}, arrayMutators),\n    initialValues: task ? taskMapper(task) : {},\n    render: ({\n      handleSubmit,\n      values\n    }) => __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(Field, {\n      name: \"title\",\n      label: \"Tytu\\u0142\",\n      component: InputComponent,\n      placeholder: \"np. Super cool formularz\"\n    }), __jsx(Field, {\n      name: \"repo\",\n      label: \"Link do zadania na Github\",\n      component: InputComponent,\n      placeholder: \"https://github.com/kodifaj\"\n    }), __jsx(Field, {\n      name: \"tags\",\n      label: \"Tagi\",\n      component: InputComponent,\n      placeholder: \"html, js, css\"\n    }), __jsx(FieldArray, {\n      name: \"tips\"\n    }, ({\n      fields,\n      meta\n    }) => __jsx(FieldArrayComponent, {\n      fields: fields,\n      meta: meta,\n      recordName: \"tip\",\n      label: \"Wskaz\\xF3wki\",\n      placeholder: \"Nowa wskaz\\xF3wka\"\n    })), __jsx(FieldArray, {\n      name: \"images\"\n    }, ({\n      fields,\n      meta\n    }) => __jsx(FieldArrayComponent, {\n      fields: fields,\n      meta: meta,\n      recordName: \"image\",\n      label: \"Obrazy\",\n      placeholder: \"Nowy obraz max 10kb\"\n    })), __jsx(Field, {\n      name: \"content\",\n      label: \"Tre\\u015B\\u0107\",\n      component: MarkdownEditorComponent,\n      placeholder: \"Na czym polega zadanie?\"\n    }), __jsx(\"span\", {\n      className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\"\n    }, \"Preview\"), __jsx(\"div\", {\n      className: \"bg-white p-2 my-2 rounded\"\n    }, __jsx(MarkdownViewComponent, {\n      source: values.content\n    })), __jsx(\"div\", {\n      className: \"mt-6 flex flex-row-reverse\"\n    }, __jsx(\"button\", {\n      className: \"bg-gradient-button text-white px-4 py-2 rounded tracking-wide\",\n      type: \"submit\"\n    }, \"zapisz zadanie\")))\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}