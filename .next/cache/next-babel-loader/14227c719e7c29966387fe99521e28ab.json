{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { UserContext } from '../../../components/providers/user.provider';\nimport { HOSTNAME } from '../../../lib/hostname.config';\nimport LayoutComponent from '../../../components/shared/layout/layout.component';\nimport TaskDetailComponent from '../../../components/task-detail/task-detail.component';\nimport '../../../public/static/style.css';\n\nvar TaskPage = function TaskPage(_ref) {\n  var task = _ref.task;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user;\n\n  var _useState = useState(task),\n      currentTask = _useState[0],\n      setCurrentTask = _useState[1];\n\n  function updateSolutions(solutions) {\n    console.log('updated solutions', solutions);\n    setCurrentTask(_objectSpread({}, currentTask, {\n      _solutions: solutions\n    }));\n  }\n\n  return __jsx(LayoutComponent, {\n    user: user\n  }, __jsx(TaskDetailComponent, _extends({\n    updateSolutions: updateSolutions\n  }, currentTask)));\n};\n\nTaskPage.getInitialProps = function _callee(_ref2) {\n  var id, res, task;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = _ref2.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(HOSTNAME, \"/api/tasks/\").concat(id)));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          task = _context.sent;\n          return _context.abrupt(\"return\", {\n            task: task\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default TaskPage;","map":{"version":3,"sources":["/Users/michal.lester/Documents/ML/kodifaj/pages/views/tasks/[id].tsx"],"names":["React","useContext","useState","fetch","UserContext","HOSTNAME","LayoutComponent","TaskDetailComponent","TaskPage","task","user","currentTask","setCurrentTask","updateSolutions","solutions","console","log","_solutions","getInitialProps","id","query","res","json"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AAGA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,QAAT,QAAyB,8BAAzB;AAEA,OAAOC,eAAP,MAA4B,oDAA5B;AACA,OAAOC,mBAAP,MAAgC,uDAAhC;AAEA,OAAO,kCAAP;;AAGA,IAAMC,QAAyB,GAAG,SAA5BA,QAA4B,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,oBAC7BR,UAAU,CAACG,WAAD,CADmB;AAAA,MACtCM,IADsC,eACtCA,IADsC;;AAAA,kBAERR,QAAQ,CAAOO,IAAP,CAFA;AAAA,MAEvCE,WAFuC;AAAA,MAE1BC,cAF0B;;AAI9C,WAASC,eAAT,CAAyBC,SAAzB,EAAgD;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,SAAjC;AACAF,IAAAA,cAAc,mBAAKD,WAAL;AAAkBM,MAAAA,UAAU,EAAEH;AAA9B,OAAd;AACD;;AAED,SACE,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEJ;AAAvB,KACE,MAAC,mBAAD;AAAqB,IAAA,eAAe,EAAEG;AAAtC,KAA2DF,WAA3D,EADF,CADF;AAKD,CAdD;;AAgBAH,QAAQ,CAACU,eAAT,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,UAAAA,EAAlB,SAASC,KAAT,CAAkBD,EAAlB;AAAA;AAAA,2CACPhB,KAAK,WAAIE,QAAJ,wBAA0Bc,EAA1B,EADE;;AAAA;AACnBE,UAAAA,GADmB;AAAA;AAAA,2CAENA,GAAG,CAACC,IAAJ,EAFM;;AAAA;AAEnBb,UAAAA,IAFmB;AAAA,2CAGlB;AAAEA,YAAAA,IAAI,EAAJA;AAAF,WAHkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAMA,eAAeD,QAAf","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { NextPage, NextPageContext } from 'next';\nimport fetch from 'isomorphic-unfetch';\nimport { Task } from '../../../lib/types/task';\n\nimport { UserContext } from '../../../components/providers/user.provider';\nimport { HOSTNAME } from '../../../lib/hostname.config';\n\nimport LayoutComponent from '../../../components/shared/layout/layout.component';\nimport TaskDetailComponent from '../../../components/task-detail/task-detail.component';\n\nimport '../../../public/static/style.css';\nimport {Solution} from \"../../../lib/types/solution\";\n\nconst TaskPage: NextPage<Props> = ({ task }) => {\n  const { user } = useContext(UserContext);\n  const [currentTask, setCurrentTask] = useState<Task>(task);\n\n  function updateSolutions(solutions: Solution[]) {\n    console.log('updated solutions', solutions)\n    setCurrentTask({...currentTask, _solutions: solutions});\n  }\n\n  return (\n    <LayoutComponent user={user}>\n      <TaskDetailComponent updateSolutions={updateSolutions} {...currentTask} />\n    </LayoutComponent>\n  );\n};\n\nTaskPage.getInitialProps = async ({ query: { id } }: NextPageContext) => {\n  const res = await fetch(`${HOSTNAME}/api/tasks/${id}`);\n  const task = await res.json();\n  return { task };\n};\n\nexport default TaskPage;\n\ninterface Props {\n  task: Task;\n}\n"]},"metadata":{},"sourceType":"module"}