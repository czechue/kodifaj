{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nexport default function MarkdownEditorComponent(props) {\n  const {\n    input,\n    placeholder,\n    label\n  } = props;\n  const textAreaRef = React.createRef();\n  const inputClassNames = 'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n  const actionToTokens = {\n    BOLD: {\n      open: \"**\",\n      close: \"**\"\n    },\n    ITALIC: {\n      open: \"_\",\n      close: \"_\"\n    },\n    HEADING: {\n      open: \"# \",\n      close: \"\"\n    },\n    CODEBLOCK: {\n      open: \"```javascript\\n\",\n      close: \"\\n```\"\n    },\n    UL: {\n      open: \"* \",\n      close: \"\"\n    },\n    OL: {\n      open: \"1. \",\n      close: \"\"\n    }\n  };\n\n  function handleTextChange() {\n    if (!this.textAreaRef.current) {\n      return;\n    }\n\n    this.props.onChange(this.textAreaRef.current.value || \"\");\n    this.autoresize();\n  }\n\n  ;\n\n  const addTokensToTextarea = (el, tokens) => {\n    const {\n      selectionStart,\n      selectionEnd,\n      value\n    } = el;\n    const startTokenLenths = tokens.open.length;\n    let newValue = value;\n    newValue = newValue.substring(0, selectionEnd) + tokens.close + newValue.substr(selectionEnd);\n    newValue = newValue.substring(0, selectionStart) + tokens.open + newValue.substr(selectionStart); // this.props.onChange(newValue);\n\n    el.value = newValue; // this.autoFocus();\n\n    el.setSelectionRange(selectionStart + startTokenLenths, selectionEnd + startTokenLenths);\n  };\n\n  const handleAction = action => e => {\n    var _textAreaRef$current;\n\n    e.preventDefault();\n    const el = textAreaRef.current;\n\n    if (!el) {\n      return;\n    }\n\n    const tokens = actionToTokens[action];\n    addTokensToTextarea(el, tokens);\n    const value = (textAreaRef === null || textAreaRef === void 0 ? void 0 : (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.value) ? textAreaRef.current.value : '';\n    input.onChange(value);\n  };\n\n  return __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(\"label\", {\n    className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\",\n    htmlFor: input.name\n  }, label), __jsx(\"button\", {\n    className: \"px-2 bg-white\",\n    type: \"button\",\n    onClick: handleAction('BOLD')\n  }, \"Bold\"), __jsx(\"div\", {\n    className: \"mt-2 flex items-stretch\"\n  }, __jsx(\"textarea\", _extends({\n    placeholder: placeholder\n  }, input, {\n    className: inputClassNames,\n    ref: textAreaRef\n  }))));\n}","map":{"version":3,"sources":["/Users/michal.lester/Documents/ML/kodifaj/components/shared/markdown-editor/markdown-editor.component.tsx"],"names":["React","MarkdownEditorComponent","props","input","placeholder","label","textAreaRef","createRef","inputClassNames","actionToTokens","BOLD","open","close","ITALIC","HEADING","CODEBLOCK","UL","OL","handleTextChange","current","onChange","value","autoresize","addTokensToTextarea","el","tokens","selectionStart","selectionEnd","startTokenLenths","length","newValue","substring","substr","setSelectionRange","handleAction","action","e","preventDefault","name"],"mappings":"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","sourcesContent":["import React, {MouseEventHandler, ReactElement} from 'react';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport default function MarkdownEditorComponent(\n  props: MarkdownEditorProps,\n): ReactElement {\n  const { input, placeholder, label } = props;\n  const textAreaRef = React.createRef<HTMLTextAreaElement>();\n  const inputClassNames =\n    'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n\n  const actionToTokens: { [action in Actions]: Tokens } = {\n    BOLD: { open: \"**\", close: \"**\" },\n    ITALIC: { open: \"_\", close: \"_\" },\n    HEADING: { open: \"# \", close: \"\" },\n    CODEBLOCK: { open: \"```javascript\\n\", close: \"\\n```\" },\n    UL: { open: \"* \", close: \"\" },\n    OL: { open: \"1. \", close: \"\" }\n  };\n\n  function handleTextChange () {\n    if (!this.textAreaRef.current) {\n      return;\n    }\n    this.props.onChange(this.textAreaRef.current.value || \"\");\n    this.autoresize();\n  };\n\n  const addTokensToTextarea = (el: HTMLTextAreaElement, tokens: Tokens): void => {\n    const { selectionStart, selectionEnd, value } = el;\n    const startTokenLenths = tokens.open.length;\n\n    let newValue = value;\n    newValue =\n      newValue.substring(0, selectionEnd) +\n      tokens.close +\n      newValue.substr(selectionEnd);\n    newValue =\n      newValue.substring(0, selectionStart) +\n      tokens.open +\n      newValue.substr(selectionStart);\n\n    // this.props.onChange(newValue);\n    el.value = newValue;\n    // this.autoFocus();\n    el.setSelectionRange(\n      selectionStart + startTokenLenths,\n      selectionEnd + startTokenLenths\n    );\n  };\n\n  const handleAction = (\n    action: Actions\n  ): MouseEventHandler<HTMLButtonElement> => e => {\n    e.preventDefault();\n\n    const el = textAreaRef.current;\n    if (!el) {\n      return;\n    }\n\n    const tokens = actionToTokens[action];\n\n    addTokensToTextarea(el, tokens);\n    const value = textAreaRef?.current?.value ? textAreaRef.current.value : '';\n    input.onChange(value);\n  };\n\n\n  return (\n    <div className=\"mb-3\">\n      <label\n        className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\"\n        htmlFor={input.name}\n      >\n        {label}\n      </label>\n      <button className=\"px-2 bg-white\" type=\"button\" onClick={handleAction('BOLD')}>Bold</button>\n      <div className=\"mt-2 flex items-stretch\">\n        <textarea\n          placeholder={placeholder}\n          {...input}\n          className={inputClassNames}\n          ref={textAreaRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport interface MarkdownEditorProps\n  extends FieldRenderProps<string, HTMLElement> {\n  label?: string;\n  placeholder?: string;\n}\n\nexport type Actions = \"BOLD\" | \"ITALIC\" | \"HEADING\" | \"CODEBLOCK\" | \"UL\" | \"OL\";\ninterface Tokens {\n  open: string;\n  close: string;\n}\n"]},"metadata":{},"sourceType":"module"}