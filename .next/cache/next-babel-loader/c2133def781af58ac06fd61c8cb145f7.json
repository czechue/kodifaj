{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { UserContext } from '../../../components/providers/user.provider';\nimport { HOSTNAME } from '../../../lib/hostname.config';\nimport LayoutComponent from '../../../components/shared/layout/layout.component';\nimport TaskDetailComponent from '../../../components/task-detail/task-detail.component';\nimport '../../../public/static/style.css'; // todo: string[] do naprawy typ, error handling\n\nfunction fetchTask(id) {\n  var res, task;\n  return _regeneratorRuntime.async(function fetchTask$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(HOSTNAME, \"/api/tasks/\").concat(id)));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          task = _context.sent;\n          return _context.abrupt(\"return\", {\n            task: task\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nvar TaskPage = function TaskPage(_ref) {\n  var task = _ref.task;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user;\n\n  var _useState = useState(task),\n      currentTask = _useState[0],\n      setCurrentTask = _useState[1];\n\n  function refresh() {\n    var refreshedProps;\n    return _regeneratorRuntime.async(function refresh$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetchTask(task._id));\n\n          case 2:\n            refreshedProps = _context2.sent;\n            setCurrentTask(refreshedProps.task);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }\n\n  return __jsx(LayoutComponent, {\n    user: user\n  }, __jsx(TaskDetailComponent, _extends({\n    updateTaskData: refresh\n  }, currentTask)));\n};\n\nTaskPage.getInitialProps = function _callee(_ref2) {\n  var id;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref2.query.id;\n          return _context3.abrupt(\"return\", fetchTask(id));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n};\n\nexport default TaskPage;","map":null,"metadata":{},"sourceType":"module"}