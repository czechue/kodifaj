{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Form, Field } from 'react-final-form';\nimport { FieldArray } from 'react-final-form-arrays';\nimport arrayMutators from 'final-form-arrays';\nimport ReactMarkdown from 'react-markdown';\nimport FormWrapperComponent from '../shared/form-wrapper/form-wrapper.component';\nimport InputComponent from '../shared/input/input.component';\nimport mapFormToNewTaskFormat from './utils/map-form-to-new-task-form.util';\nimport NewTaskHeading from './heading/heading.component';\nimport FieldArrayComponent from './field-array/field-array.component';\nimport CodeBlock from './utils/code-block.hoc';\nimport MarkdownEditorComponent from '../shared/markdown-editor/markdown-editor.component'; // const required = (value: string) => (value ? undefined : \"Required\");\n\nexport default function NewTaskComponent(_ref) {\n  var onSubmit = _ref.onSubmit;\n\n  // todo: investigate why values argument doesnt work with NewTaskForm type\n  function onFormSubmit(values) {\n    return _regeneratorRuntime.async(function onFormSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (onSubmit) {\n              onSubmit(mapFormToNewTaskFormat(values));\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(NewTaskHeading, null, \"Kreator zada\\u0144\"), __jsx(FormWrapperComponent, null, __jsx(Form, {\n    onSubmit: onFormSubmit,\n    mutators: _objectSpread({}, arrayMutators),\n    render: function render(_ref2) {\n      var handleSubmit = _ref2.handleSubmit,\n          values = _ref2.values;\n      return __jsx(\"form\", {\n        onSubmit: handleSubmit\n      }, __jsx(Field, {\n        name: \"title\",\n        label: \"Tytu\\u0142\",\n        component: InputComponent,\n        placeholder: \"np. Super cool formularz\"\n      }), __jsx(Field, {\n        name: \"repo\",\n        label: \"Link do zadania na Github\",\n        component: InputComponent,\n        placeholder: \"https://github.com/kodifaj\"\n      }), __jsx(Field, {\n        name: \"tags\",\n        label: \"Tagi\",\n        component: InputComponent,\n        placeholder: \"html, js, css\"\n      }), __jsx(FieldArray, {\n        name: \"tips\"\n      }, function (_ref3) {\n        var fields = _ref3.fields,\n            meta = _ref3.meta;\n        return __jsx(FieldArrayComponent, {\n          fields: fields,\n          meta: meta,\n          recordName: \"tip\",\n          label: \"Wskaz\\xF3wki\",\n          placeholder: \"Nowa wskaz\\xF3wka\"\n        });\n      }), __jsx(FieldArray, {\n        name: \"images\"\n      }, function (_ref4) {\n        var fields = _ref4.fields,\n            meta = _ref4.meta;\n        return __jsx(FieldArrayComponent, {\n          fields: fields,\n          meta: meta,\n          recordName: \"image\",\n          label: \"Obrazy\",\n          placeholder: \"Nowy obraz max 10kb\"\n        });\n      }), __jsx(Field, {\n        name: \"content\",\n        label: \"Tre\\u015B\\u0107\",\n        component: MarkdownEditorComponent,\n        placeholder: \"Na czym polega zadanie?\"\n      }), __jsx(\"span\", null, \"Preview\"), __jsx(\"div\", {\n        className: \"bg-white p-2 my-2 h-48 rounded\"\n      }, __jsx(ReactMarkdown, {\n        renderers: {\n          code: CodeBlock\n        },\n        source: values.content\n      })), __jsx(\"span\", null, \"form state\"), __jsx(\"pre\", null, _JSON$stringify(values, null, 2)), __jsx(\"button\", {\n        className: \"bg-gradient-button text-white px-4 py-2 rounded tracking-wide\",\n        type: \"submit\"\n      }, \"Wy\\u015Blij\"));\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/michal.lester/Documents/ML/kodifaj/components/new-task/new-task.component.tsx"],"names":["React","Form","Field","FieldArray","arrayMutators","ReactMarkdown","FormWrapperComponent","InputComponent","mapFormToNewTaskFormat","NewTaskHeading","FieldArrayComponent","CodeBlock","MarkdownEditorComponent","NewTaskComponent","onSubmit","onFormSubmit","values","handleSubmit","fields","meta","code","content"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAOC,oBAAP,MAAiC,+CAAjC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,uBAAP,MAAoC,qDAApC,C,CAEA;;AAEA,eAAe,SAASC,gBAAT,OAAsD;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;;AACnE;AACA,WAAeC,YAAf,CAA4BC,MAA5B;AAAA;AAAA;AAAA;AAAA;AACE,gBAAIF,QAAJ,EAAc;AACZA,cAAAA,QAAQ,CAACN,sBAAsB,CAACQ,MAAD,CAAvB,CAAR;AACD;;AAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SACE,4BACE,MAAC,cAAD,6BADF,EAEE,MAAC,oBAAD,QACE,MAAC,IAAD;AACE,IAAA,QAAQ,EAAED,YADZ;AAEE,IAAA,QAAQ,oBACHX,aADG,CAFV;AAKE,IAAA,MAAM,EAAE;AAAA,UAAGa,YAAH,SAAGA,YAAH;AAAA,UAAiBD,MAAjB,SAAiBA,MAAjB;AAAA,aACN;AAAM,QAAA,QAAQ,EAAEC;AAAhB,SACE,MAAC,KAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,KAAK,EAAC,YAFR;AAGE,QAAA,SAAS,EAAEV,cAHb;AAIE,QAAA,WAAW,EAAC;AAJd,QADF,EAQE,MAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,2BAFR;AAGE,QAAA,SAAS,EAAEA,cAHb;AAIE,QAAA,WAAW,EAAC;AAJd,QARF,EAeE,MAAC,KAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,SAAS,EAAEA,cAHb;AAIE,QAAA,WAAW,EAAC;AAJd,QAfF,EAsBE,MAAC,UAAD;AAAY,QAAA,IAAI,EAAC;AAAjB,SACG;AAAA,YAAGW,MAAH,SAAGA,MAAH;AAAA,YAAWC,IAAX,SAAWA,IAAX;AAAA,eACC,MAAC,mBAAD;AACE,UAAA,MAAM,EAAED,MADV;AAEE,UAAA,IAAI,EAAEC,IAFR;AAGE,UAAA,UAAU,EAAC,KAHb;AAIE,UAAA,KAAK,EAAC,cAJR;AAKE,UAAA,WAAW,EAAC;AALd,UADD;AAAA,OADH,CAtBF,EAkCE,MAAC,UAAD;AAAY,QAAA,IAAI,EAAC;AAAjB,SACG;AAAA,YAAGD,MAAH,SAAGA,MAAH;AAAA,YAAWC,IAAX,SAAWA,IAAX;AAAA,eACC,MAAC,mBAAD;AACE,UAAA,MAAM,EAAED,MADV;AAEE,UAAA,IAAI,EAAEC,IAFR;AAGE,UAAA,UAAU,EAAC,OAHb;AAIE,UAAA,KAAK,EAAC,QAJR;AAKE,UAAA,WAAW,EAAC;AALd,UADD;AAAA,OADH,CAlCF,EA8CE,MAAC,KAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,KAAK,EAAC,iBAFR;AAGE,QAAA,SAAS,EAAEP,uBAHb;AAIE,QAAA,WAAW,EAAC;AAJd,QA9CF,EAqDE,8BArDF,EAsDE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,aAAD;AACE,QAAA,SAAS,EAAE;AACTQ,UAAAA,IAAI,EAAET;AADG,SADb;AAIE,QAAA,MAAM,EAAEK,MAAM,CAACK;AAJjB,QADF,CAtDF,EA+DE,iCA/DF,EAgEE,mBAAM,gBAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAN,CAhEF,EAkEE;AACE,QAAA,SAAS,EAAC,+DADZ;AAEE,QAAA,IAAI,EAAC;AAFP,uBAlEF,CADM;AAAA;AALV,IADF,CAFF,CADF;AAwFD","sourcesContent":["import React from 'react';\nimport { AxiosResponse } from 'axios';\nimport { Form, Field } from 'react-final-form';\nimport { FieldArray } from 'react-final-form-arrays';\nimport arrayMutators from 'final-form-arrays';\n\nimport ReactMarkdown from 'react-markdown';\n\nimport FormWrapperComponent from '../shared/form-wrapper/form-wrapper.component';\nimport InputComponent from '../shared/input/input.component';\nimport mapFormToNewTaskFormat from './utils/map-form-to-new-task-form.util';\nimport NewTaskHeading from './heading/heading.component';\nimport FieldArrayComponent from './field-array/field-array.component';\nimport CodeBlock from './utils/code-block.hoc';\nimport MarkdownEditorComponent from '../shared/markdown-editor/markdown-editor.component';\n\n// const required = (value: string) => (value ? undefined : \"Required\");\n\nexport default function NewTaskComponent({ onSubmit }: NewTaskProps) {\n  // todo: investigate why values argument doesnt work with NewTaskForm type\n  async function onFormSubmit(values: any) {\n    if (onSubmit) {\n      onSubmit(mapFormToNewTaskFormat(values));\n    }\n  }\n\n  return (\n    <>\n      <NewTaskHeading>Kreator zadań</NewTaskHeading>\n      <FormWrapperComponent>\n        <Form\n          onSubmit={onFormSubmit}\n          mutators={{\n            ...arrayMutators,\n          }}\n          render={({ handleSubmit, values }) => (\n            <form onSubmit={handleSubmit}>\n              <Field\n                name=\"title\"\n                label=\"Tytuł\"\n                component={InputComponent}\n                placeholder=\"np. Super cool formularz\"\n              />\n\n              <Field\n                name=\"repo\"\n                label=\"Link do zadania na Github\"\n                component={InputComponent}\n                placeholder=\"https://github.com/kodifaj\"\n              />\n\n              <Field\n                name=\"tags\"\n                label=\"Tagi\"\n                component={InputComponent}\n                placeholder=\"html, js, css\"\n              />\n\n              <FieldArray name=\"tips\">\n                {({ fields, meta }) => (\n                  <FieldArrayComponent\n                    fields={fields}\n                    meta={meta}\n                    recordName=\"tip\"\n                    label=\"Wskazówki\"\n                    placeholder=\"Nowa wskazówka\"\n                  />\n                )}\n              </FieldArray>\n\n              <FieldArray name=\"images\">\n                {({ fields, meta }) => (\n                  <FieldArrayComponent\n                    fields={fields}\n                    meta={meta}\n                    recordName=\"image\"\n                    label=\"Obrazy\"\n                    placeholder=\"Nowy obraz max 10kb\"\n                  />\n                )}\n              </FieldArray>\n\n              <Field\n                name=\"content\"\n                label=\"Treść\"\n                component={MarkdownEditorComponent}\n                placeholder=\"Na czym polega zadanie?\"\n              />\n\n              <span>Preview</span>\n              <div className=\"bg-white p-2 my-2 h-48 rounded\">\n                <ReactMarkdown\n                  renderers={{\n                    code: CodeBlock,\n                  }}\n                  source={values.content}\n                />\n              </div>\n\n              <span>form state</span>\n              <pre>{JSON.stringify(values, null, 2)}</pre>\n\n              <button\n                className=\"bg-gradient-button text-white px-4 py-2 rounded tracking-wide\"\n                type=\"submit\"\n              >\n                Wyślij\n              </button>\n            </form>\n          )}\n        />\n      </FormWrapperComponent>\n    </>\n  );\n}\n\ninterface NewTaskProps {\n  onSubmit: (task: NewTaskMapped) => Promise<AxiosResponse<NewTaskMapped>>;\n}\n\nexport interface NewTaskForm {\n  content: string;\n  images: Image[];\n  tips: Tip[];\n  title: string;\n  tags: string;\n}\n\nexport interface NewTaskMapped {\n  content: string;\n  images: string[] | [];\n  tips: string[] | [];\n  title: string;\n  tags: string[] | [];\n}\n\ninterface Tip {\n  tip: string;\n}\n\ninterface Image {\n  image: string;\n}\n"]},"metadata":{},"sourceType":"module"}