{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nexport default function MarkdownEditorComponent(props) {\n  var input = props.input,\n      placeholder = props.placeholder,\n      label = props.label;\n  var textAreaRef = React.createRef();\n  var inputClassNames = 'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n  var actionToTokens = {\n    BOLD: {\n      open: '**',\n      close: '**'\n    },\n    ITALIC: {\n      open: '_',\n      close: '_'\n    },\n    HEADING: {\n      open: '# ',\n      close: ''\n    },\n    CODEBLOCK: {\n      open: '```javascript\\n',\n      close: '\\n```'\n    },\n    UL: {\n      open: '* ',\n      close: ''\n    },\n    OL: {\n      open: '1. ',\n      close: ''\n    }\n  };\n\n  var addTokensToTextarea = function addTokensToTextarea(el, tokens) {\n    var selectionStart = el.selectionStart,\n        selectionEnd = el.selectionEnd,\n        value = el.value;\n    var startTokenLenths = tokens.open.length;\n    var newValue = value;\n    newValue = newValue.substring(0, selectionEnd) + tokens.close + newValue.substr(selectionEnd);\n    newValue = newValue.substring(0, selectionStart) + tokens.open + newValue.substr(selectionStart);\n    el.value = newValue;\n    el.setSelectionRange(selectionStart + startTokenLenths, selectionEnd + startTokenLenths);\n  };\n\n  var handleAction = function handleAction(action) {\n    return function (e) {\n      var _textAreaRef$current;\n\n      e.preventDefault();\n      var el = textAreaRef.current;\n\n      if (!el) {\n        return;\n      }\n\n      var tokens = actionToTokens[action];\n      addTokensToTextarea(el, tokens);\n      var value = (textAreaRef === null || textAreaRef === void 0 ? void 0 : (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.value) ? textAreaRef.current.value : '';\n      input.onChange(value);\n    };\n  };\n\n  return __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(\"label\", {\n    className: \"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\",\n    htmlFor: input.name\n  }, label), __jsx(\"button\", {\n    className: \"px-2 bg-white w-12\",\n    type: \"button\",\n    onClick: handleAction('BOLD'),\n    \"aria-label\": \"wstaw pogrubienie\",\n    title: \"wstaw pogrubienie\"\n  }, \"B\"), __jsx(\"button\", {\n    className: \"px-2 bg-white w-12 ml-2\",\n    type: \"button\",\n    onClick: handleAction('ITALIC'),\n    \"aria-label\": \"wstaw italik\",\n    title: \"wstaw italik\"\n  }, \"I\"), __jsx(\"button\", {\n    className: \"px-2 bg-white w-12 ml-2\",\n    type: \"button\",\n    onClick: handleAction('HEADING'),\n    \"aria-label\": \"wstaw nag\\u0142\\xF3wek\",\n    title: \"wstaw nag\\u0142\\xF3wek\"\n  }), __jsx(\"span\", {\n    className: \"separator\"\n  }, \"|\"), __jsx(\"button\", {\n    className: \"px-2 bg-white w-12 ml-2\",\n    type: \"button\",\n    onClick: handleAction('CODEBLOCK'),\n    \"aria-label\": \"wstaw blok kodu\",\n    title: \"wstaw blok kodu\"\n  }, \"code\"), __jsx(\"button\", {\n    className: \"px-2 bg-white w-12 ml-2\",\n    type: \"button\",\n    onClick: handleAction('UL'),\n    \"aria-label\": \"wstaw list\\u0119 nieuporz\\u0105dkowan\\u0105\",\n    title: \"wstaw list\\u0119 nieuporz\\u0105dkowan\\u0105\"\n  }, \"li\"), __jsx(\"button\", {\n    className: \"px-2 bg-white w-12 ml-2\",\n    type: \"button\",\n    onClick: handleAction('OL'),\n    \"aria-label\": \"wstaw list\\u0119 uporz\\u0105dkowan\\u0105\",\n    title: \"wstaw list\\u0119 uporz\\u0105dkowan\\u0105\"\n  }, \"ol\"), __jsx(\"div\", {\n    className: \"mt-2 flex items-stretch\"\n  }, __jsx(\"textarea\", _extends({\n    placeholder: placeholder\n  }, input, {\n    className: inputClassNames,\n    ref: textAreaRef\n  }))));\n}","map":{"version":3,"sources":["/Users/michal.lester/Documents/ML/kodifaj/components/shared/markdown-editor/markdown-editor.component.tsx"],"names":["React","MarkdownEditorComponent","props","input","placeholder","label","textAreaRef","createRef","inputClassNames","actionToTokens","BOLD","open","close","ITALIC","HEADING","CODEBLOCK","UL","OL","addTokensToTextarea","el","tokens","selectionStart","selectionEnd","value","startTokenLenths","length","newValue","substring","substr","setSelectionRange","handleAction","action","e","preventDefault","current","onChange","name"],"mappings":"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","sourcesContent":["import React, { MouseEventHandler, ReactElement } from 'react';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport default function MarkdownEditorComponent(\n  props: MarkdownEditorProps,\n): ReactElement {\n  const { input, placeholder, label } = props;\n  const textAreaRef = React.createRef<HTMLTextAreaElement>();\n  const inputClassNames =\n    'font-mono appearance-none block w-full bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n\n  const actionToTokens: { [action in Actions]: Tokens } = {\n    BOLD: { open: '**', close: '**' },\n    ITALIC: { open: '_', close: '_' },\n    HEADING: { open: '# ', close: '' },\n    CODEBLOCK: { open: '```javascript\\n', close: '\\n```' },\n    UL: { open: '* ', close: '' },\n    OL: { open: '1. ', close: '' },\n  };\n\n  const addTokensToTextarea = (\n    el: HTMLTextAreaElement,\n    tokens: Tokens,\n  ): void => {\n    const { selectionStart, selectionEnd, value } = el;\n    const startTokenLenths = tokens.open.length;\n\n    let newValue = value;\n    newValue =\n      newValue.substring(0, selectionEnd) +\n      tokens.close +\n      newValue.substr(selectionEnd);\n    newValue =\n      newValue.substring(0, selectionStart) +\n      tokens.open +\n      newValue.substr(selectionStart);\n\n    el.value = newValue;\n    el.setSelectionRange(\n      selectionStart + startTokenLenths,\n      selectionEnd + startTokenLenths,\n    );\n  };\n\n  const handleAction = (\n    action: Actions,\n  ): MouseEventHandler<HTMLButtonElement> => e => {\n    e.preventDefault();\n\n    const el = textAreaRef.current;\n    if (!el) {\n      return;\n    }\n\n    const tokens = actionToTokens[action];\n\n    addTokensToTextarea(el, tokens);\n    const value = textAreaRef?.current?.value ? textAreaRef.current.value : '';\n    input.onChange(value);\n  };\n\n  return (\n    <div className=\"mb-3\">\n      <label\n        className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\"\n        htmlFor={input.name}\n      >\n        {label}\n      </label>\n      <button\n        className=\"px-2 bg-white w-12\"\n        type=\"button\"\n        onClick={handleAction('BOLD')}\n        aria-label=\"wstaw pogrubienie\"\n        title=\"wstaw pogrubienie\"\n      >\n        B\n      </button>\n\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('ITALIC')}\n        aria-label=\"wstaw italik\"\n        title=\"wstaw italik\"\n      >\n        I\n      </button>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('HEADING')}\n        aria-label=\"wstaw nagłówek\"\n        title=\"wstaw nagłówek\"\n      />\n      <span className=\"separator\">|</span>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('CODEBLOCK')}\n        aria-label=\"wstaw blok kodu\"\n        title=\"wstaw blok kodu\"\n      >\n        code\n      </button>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('UL')}\n        aria-label=\"wstaw listę nieuporządkowaną\"\n        title=\"wstaw listę nieuporządkowaną\"\n      >\n        li\n      </button>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('OL')}\n        aria-label=\"wstaw listę uporządkowaną\"\n        title=\"wstaw listę uporządkowaną\"\n      >\n        ol\n      </button>\n\n      <div className=\"mt-2 flex items-stretch\">\n        <textarea\n          placeholder={placeholder}\n          {...input}\n          className={inputClassNames}\n          ref={textAreaRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport interface MarkdownEditorProps\n  extends FieldRenderProps<string, HTMLElement> {\n  label?: string;\n  placeholder?: string;\n}\n\nexport type Actions = 'BOLD' | 'ITALIC' | 'HEADING' | 'CODEBLOCK' | 'UL' | 'OL';\ninterface Tokens {\n  open: string;\n  close: string;\n}\n"]},"metadata":{},"sourceType":"module"}