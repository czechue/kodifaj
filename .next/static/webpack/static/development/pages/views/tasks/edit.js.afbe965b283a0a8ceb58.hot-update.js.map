{"version":3,"file":"static/webpack/static/development/pages/views/tasks/edit.js.afbe965b283a0a8ceb58.hot-update.js","sources":["webpack:///./components/shared/markdown-editor/markdown-editor.component.tsx"],"sourcesContent":["// Code based on al\n// Copyright (c) 2017-present Michał Miszczyszyn typeofweb.com\nimport React, { MouseEventHandler, ReactElement } from 'react';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport default function MarkdownEditorComponent(\n  props: MarkdownEditorProps,\n): ReactElement {\n  const { input, placeholder, label } = props;\n  const textAreaRef = React.createRef<HTMLTextAreaElement>();\n  const textAreaClassNames =\n    'font-mono appearance-none block w-full h-80 bg-white text-gray-700 rounded-l py-3 px-4 leading-tight border-transparent border focus:outline-none focus:border-violet_primary';\n\n  const actionToTokens: { [action in Actions]: Tokens } = {\n    BOLD: { open: '**', close: '**' },\n    ITALIC: { open: '_', close: '_' },\n    HEADING: { open: '# ', close: '' },\n    CODEBLOCK: { open: '```javascript\\n', close: '\\n```' },\n    UL: { open: '* ', close: '' },\n    OL: { open: '1. ', close: '' },\n  };\n\n  const addTokensToTextarea = (\n    el: HTMLTextAreaElement,\n    tokens: Tokens,\n  ): void => {\n    const { selectionStart, selectionEnd, value } = el;\n    const startTokenLenths = tokens.open.length;\n\n    let newValue = value;\n    newValue =\n      newValue.substring(0, selectionEnd) +\n      tokens.close +\n      newValue.substr(selectionEnd);\n    newValue =\n      newValue.substring(0, selectionStart) +\n      tokens.open +\n      newValue.substr(selectionStart);\n\n    el.value = newValue;\n    el.setSelectionRange(\n      selectionStart + startTokenLenths,\n      selectionEnd + startTokenLenths,\n    );\n  };\n\n  const handleAction = (\n    action: Actions,\n  ): MouseEventHandler<HTMLButtonElement> => e => {\n    e.preventDefault();\n\n    const el = textAreaRef.current;\n    if (!el) {\n      return;\n    }\n\n    const tokens = actionToTokens[action];\n\n    addTokensToTextarea(el, tokens);\n    const value = textAreaRef?.current?.value ? textAreaRef.current.value : '';\n    input.onChange(value);\n  };\n\n  return (\n    <div className=\"mb-3\">\n      <label\n        className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2\"\n        htmlFor={input.name}\n      >\n        {label}\n      </label>\n      <button\n        className=\"px-2 bg-white w-12\"\n        type=\"button\"\n        onClick={handleAction('BOLD')}\n        aria-label=\"wstaw pogrubienie\"\n        title=\"wstaw pogrubienie\"\n      >\n        B\n      </button>\n\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('ITALIC')}\n        aria-label=\"wstaw italik\"\n        title=\"wstaw italik\"\n      >\n        I\n      </button>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('HEADING')}\n        aria-label=\"wstaw nagłówek\"\n        title=\"wstaw nagłówek\"\n      >\n        H\n      </button>\n      <span className=\"ml-2\">|</span>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('CODEBLOCK')}\n        aria-label=\"wstaw blok kodu\"\n        title=\"wstaw blok kodu\"\n      >\n        code\n      </button>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('UL')}\n        aria-label=\"wstaw listę nieuporządkowaną\"\n        title=\"wstaw listę nieuporządkowaną\"\n      >\n        li\n      </button>\n      <button\n        className=\"px-2 bg-white w-12 ml-2\"\n        type=\"button\"\n        onClick={handleAction('OL')}\n        aria-label=\"wstaw listę uporządkowaną\"\n        title=\"wstaw listę uporządkowaną\"\n      >\n        ol\n      </button>\n\n      <div className=\"mt-2 flex items-stretch\">\n        <textarea\n          placeholder={placeholder}\n          {...input}\n          className={textAreaClassNames}\n          ref={textAreaRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport interface MarkdownEditorProps\n  extends FieldRenderProps<string, HTMLElement> {\n  label?: string;\n  placeholder?: string;\n}\n\nexport type Actions = 'BOLD' | 'ITALIC' | 'HEADING' | 'CODEBLOCK' | 'UL' | 'OL';\ninterface Tokens {\n  open: string;\n  close: string;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AANA;AACA;AAQA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AAKA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAfA;AACA;AAgBA;AACA;AAAA;AAEA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AALA;AAUA;AAAA;AAEA;AADA;AAGA;AACA;AAJA;AASA;;;;A","sourceRoot":""}